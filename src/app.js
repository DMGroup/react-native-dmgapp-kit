'use strict';import React, { Component } from 'react';import { AsyncStorage, View, Text } from 'react-native';import { Provider } from 'react-redux';import { createStore, applyMiddleware, } from 'redux';import thunk from 'redux-thunk';import { persistStore, autoRehydrate } from 'redux-persist';import Reducers from './reducers';import Container from './container';const createAppStore = applyMiddleware( thunk )( createStore );function configureStore( onComplete ) {  const store = autoRehydrate()( createAppStore )( Reducers );  persistStore( store, { storage: AsyncStorage }, onComplete );  return store;}class App extends Component {  constructor() {    super();    this.state = {      isLoading: true,      store: configureStore( () => this.setState( { isLoading: false } ) )    };  }  render() {    if ( this.state.isLoading ) {      return null;    }    return (      <Provider store={ this.state.store }>        <Container />      </Provider>    );  }}export default App;